# Multi-stage build using pre-built base image approach
# This version uses a base image that already has Java installed, avoiding apk add

# Stage 1: Builder with full JDK
FROM eclipse-temurin:21.0.8_9-jdk-alpine-3.22 AS builder
WORKDIR /build
COPY target/gs-spring-boot-docker-0.2.0.jar /build/app.jar

# Stage 2: Create a minimal runtime base
FROM eclipse-temurin:21.0.8_9-jre-alpine-3.22 AS base-runtime

# Remove package manager and cache to make it distroless-like
RUN rm -rf /var/cache/apk/* /etc/apk /usr/share/man /usr/share/doc /tmp/* && \
    # Remove unnecessary binaries (keep only essential ones)
    find /bin /sbin /usr/bin /usr/sbin -type f ! -name "java" ! -name "sh" ! -name "cat" ! -name "ls" ! -name "mkdir" ! -name "rm" ! -name "cp" ! -name "mv" ! -name "chown" ! -name "chmod" ! -name "ln" ! -name "id" ! -name "whoami" ! -name "ps" ! -name "kill" ! -name "sleep" ! -name "echo" ! -name "printf" ! -name "test" ! -name "[" -delete 2>/dev/null || true

# Stage 3: Final application image
FROM base-runtime AS final

# Create non-root user
RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

# Set working directory
WORKDIR /app

# Copy the JAR from builder stage
COPY --from=builder /build/app.jar /app/app.jar

# Set ownership to non-root user
RUN chown -R nonroot:nonroot /app

# Switch to non-root user
USER nonroot:nonroot

# Expose port
EXPOSE 8080

# Run application
ENTRYPOINT ["java", "-jar", "/app/app.jar"]
