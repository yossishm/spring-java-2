#!/bin/bash

# CVE Monitoring Script for Spring and .NET Projects
# This script checks for CVEs in both Java Spring Boot and .NET applications

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="/Users/yshmulev/dev/spring-java-2"
SPRING_PROJECT="$PROJECT_ROOT"
DOTNET_PROJECT="$PROJECT_ROOT/dotnet-spring-equivalent"
OUTPUT_DIR="$PROJECT_ROOT/security-reports"
DATE=$(date +%Y%m%d_%H%M%S)

# Create output directory
mkdir -p "$OUTPUT_DIR"

echo -e "${BLUE}🔍 Starting CVE Monitoring for Spring and .NET Projects${NC}"
echo "=================================================="

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}❌ Docker is not running. Please start Docker and try again.${NC}"
        exit 1
    fi
}

# Function to scan Spring Boot application
scan_spring() {
    echo -e "${YELLOW}📦 Scanning Spring Boot Application...${NC}"
    
    # Build Spring Boot image
    echo "Building Spring Boot image..."
    docker build -f Dockerfile.alpine-distroless-v2 -t spring-app:latest "$SPRING_PROJECT" > /dev/null 2>&1
    
    # Scan with Trivy
    echo "Scanning with Trivy..."
    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image --format json --output "$OUTPUT_DIR/spring-trivy-$DATE.json" \
        spring-app:latest > /dev/null 2>&1
    
    # Scan with Docker Scout
    echo "Scanning with Docker Scout..."
    docker scout quickview spring-app:latest > "$OUTPUT_DIR/spring-scout-$DATE.txt" 2>&1 || true
    
    # Check for specific Spring CVEs
    echo "Checking for known Spring CVEs..."
    check_spring_cves
}

# Function to scan .NET application
scan_dotnet() {
    echo -e "${YELLOW}📦 Scanning .NET Application...${NC}"
    
    # Build .NET image
    echo "Building .NET image..."
    docker build -f Dockerfile.distroless -t dotnet-app:latest "$DOTNET_PROJECT" > /dev/null 2>&1
    
    # Scan with Trivy
    echo "Scanning with Trivy..."
    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image --format json --output "$OUTPUT_DIR/dotnet-trivy-$DATE.json" \
        dotnet-app:latest > /dev/null 2>&1
    
    # Scan with Docker Scout
    echo "Scanning with Docker Scout..."
    docker scout quickview dotnet-app:latest > "$OUTPUT_DIR/dotnet-scout-$DATE.txt" 2>&1 || true
    
    # Check for specific .NET CVEs
    echo "Checking for known .NET CVEs..."
    check_dotnet_cves
}

# Function to check for specific Spring CVEs
check_spring_cves() {
    echo -e "${BLUE}🔍 Checking for known Spring CVEs...${NC}"
    
    # Known Spring CVEs to check
    SPRING_CVES=(
        "CVE-2025-58056"  # Netty HTTP request smuggling (HIGH)
        "CVE-2025-22234"  # Spring Security information exposure
        "CVE-2025-22232"  # Spring Cloud Config authorization bypass
        "CVE-2025-22228"  # Spring Security authorization bypass
        "CVE-2023-34040"  # Spring for Apache Kafka RCE
        "CVE-2024-38829"  # Spring LDAP authorization bypass
        "CVE-2024-38808"  # Spring Framework DoS
        "CVE-2024-38809"  # Spring Framework DoS
    )
    
    for cve in "${SPRING_CVES[@]}"; do
        if grep -q "$cve" "$OUTPUT_DIR/spring-trivy-$DATE.json" 2>/dev/null; then
            echo -e "${RED}⚠️  FOUND: $cve in Spring application${NC}"
        else
            echo -e "${GREEN}✅ Not found: $cve${NC}"
        fi
    done
}

# Function to check for specific .NET CVEs
check_dotnet_cves() {
    echo -e "${BLUE}🔍 Checking for known .NET CVEs...${NC}"
    
    # Known .NET CVEs to check
    DOTNET_CVES=(
        "CVE-2018-8540"   # .NET Framework RCE
        "CVE-2023-29337"  # ASP.NET Core elevation of privilege
        "CVE-2023-33128"  # ASP.NET Core information disclosure
        "CVE-2023-33170"  # ASP.NET Core denial of service
    )
    
    for cve in "${DOTNET_CVES[@]}"; do
        if grep -q "$cve" "$OUTPUT_DIR/dotnet-trivy-$DATE.json" 2>/dev/null; then
            echo -e "${RED}⚠️  FOUND: $cve in .NET application${NC}"
        else
            echo -e "${GREEN}✅ Not found: $cve${NC}"
        fi
    done
}

# Function to generate summary report
generate_summary() {
    echo -e "${BLUE}📊 Generating Summary Report...${NC}"
    
    SUMMARY_FILE="$OUTPUT_DIR/cve-summary-$DATE.md"
    
    cat > "$SUMMARY_FILE" << EOF
# CVE Security Report - $(date)

## Spring Boot Application
- **Image**: spring-app:latest
- **Base**: Alpine 3.22.1 with OpenJDK 21
- **Scan Date**: $(date)
- **Trivy Report**: spring-trivy-$DATE.json
- **Docker Scout Report**: spring-scout-$DATE.txt

## .NET Application
- **Image**: dotnet-app:latest
- **Base**: distroless/java21-debian12:nonroot
- **Scan Date**: $(date)
- **Trivy Report**: dotnet-trivy-$DATE.json
- **Docker Scout Report**: dotnet-scout-$DATE.txt

## Recommendations
1. Review all HIGH and CRITICAL vulnerabilities
2. Update dependencies to latest secure versions
3. Consider using Alpine-based images for better security
4. Implement automated scanning in CI/CD pipeline

## Next Steps
- Set up automated daily scanning
- Configure alerts for new CVEs
- Review and update security policies
EOF

    echo -e "${GREEN}📄 Summary report generated: $SUMMARY_FILE${NC}"
}

# Function to check for outdated dependencies
check_dependencies() {
    echo -e "${YELLOW}📋 Checking for outdated dependencies...${NC}"
    
    # Check Spring Boot dependencies
    echo "Checking Spring Boot dependencies..."
    cd "$SPRING_PROJECT"
    mvn versions:display-dependency-updates > "$OUTPUT_DIR/spring-dependencies-$DATE.txt" 2>&1 || true
    
    # Check .NET dependencies
    echo "Checking .NET dependencies..."
    cd "$DOTNET_PROJECT"
    dotnet list package --outdated > "$OUTPUT_DIR/dotnet-dependencies-$DATE.txt" 2>&1 || true
    
    cd "$PROJECT_ROOT"
}

# Main execution
main() {
    check_docker
    
    echo -e "${GREEN}🚀 Starting CVE monitoring...${NC}"
    
    scan_spring
    echo ""
    scan_dotnet
    echo ""
    check_dependencies
    echo ""
    generate_summary
    
    echo -e "${GREEN}✅ CVE monitoring completed successfully!${NC}"
    echo -e "${BLUE}📁 Reports saved in: $OUTPUT_DIR${NC}"
    echo -e "${YELLOW}💡 Tip: Set up this script to run daily via cron job${NC}"
}

# Run main function
main "$@"
