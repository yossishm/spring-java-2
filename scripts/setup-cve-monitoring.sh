#!/bin/bash

# Setup script for CVE monitoring
# This script sets up automated CVE monitoring for both Spring and .NET projects

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

PROJECT_ROOT="/Users/yshmulev/dev/spring-java-2"
SCRIPT_DIR="$PROJECT_ROOT/scripts"

echo -e "${BLUE}🔧 Setting up CVE Monitoring for Spring and .NET Projects${NC}"
echo "=============================================================="

# Function to check if required tools are installed
check_dependencies() {
    echo -e "${YELLOW}🔍 Checking required dependencies...${NC}"
    
    local missing_deps=()
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
    fi
    
    # Check Maven
    if ! command -v mvn &> /dev/null; then
        missing_deps+=("maven")
    fi
    
    # Check .NET
    if ! command -v dotnet &> /dev/null; then
        missing_deps+=("dotnet")
    fi
    
    # Check Trivy
    if ! command -v trivy &> /dev/null; then
        echo -e "${YELLOW}⚠️  Trivy not found. Installing via Docker...${NC}"
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}❌ Missing dependencies: ${missing_deps[*]}${NC}"
        echo "Please install the missing dependencies and run this script again."
        exit 1
    fi
    
    echo -e "${GREEN}✅ All required dependencies are installed${NC}"
}

# Function to create cron job
setup_cron_job() {
    echo -e "${YELLOW}⏰ Setting up cron job for daily CVE monitoring...${NC}"
    
    # Create cron job entry
    CRON_ENTRY="0 6 * * * $SCRIPT_DIR/cve-monitor.sh >> $PROJECT_ROOT/logs/cve-monitor.log 2>&1"
    
    # Check if cron job already exists
    if crontab -l 2>/dev/null | grep -q "cve-monitor.sh"; then
        echo -e "${YELLOW}⚠️  CVE monitoring cron job already exists${NC}"
    else
        # Add cron job
        (crontab -l 2>/dev/null; echo "$CRON_ENTRY") | crontab -
        echo -e "${GREEN}✅ CVE monitoring cron job added${NC}"
        echo "   Schedule: Daily at 6:00 AM"
        echo "   Command: $SCRIPT_DIR/cve-monitor.sh"
    fi
}

# Function to create log directory
setup_logging() {
    echo -e "${YELLOW}📝 Setting up logging...${NC}"
    
    mkdir -p "$PROJECT_ROOT/logs"
    mkdir -p "$PROJECT_ROOT/security-reports"
    
    echo -e "${GREEN}✅ Log directories created${NC}"
    echo "   Logs: $PROJECT_ROOT/logs/"
    echo "   Reports: $PROJECT_ROOT/security-reports/"
}

# Function to create notification script
create_notification_script() {
    echo -e "${YELLOW}📧 Creating notification script...${NC}"
    
    cat > "$SCRIPT_DIR/notify-cve.sh" << 'EOF'
#!/bin/bash

# CVE Notification Script
# This script sends notifications when CVEs are found

PROJECT_ROOT="/Users/yshmulev/dev/spring-java-2"
REPORT_DIR="$PROJECT_ROOT/security-reports"
LATEST_REPORT=$(ls -t "$REPORT_DIR"/cve-summary-*.md 2>/dev/null | head -n1)

if [ -z "$LATEST_REPORT" ]; then
    echo "No CVE reports found"
    exit 0
fi

# Check if any HIGH or CRITICAL vulnerabilities were found
if grep -q "HIGH\|CRITICAL" "$LATEST_REPORT" 2>/dev/null; then
    echo "🚨 HIGH or CRITICAL vulnerabilities found!"
    echo "Report: $LATEST_REPORT"
    
    # Here you can add email notifications, Slack webhooks, etc.
    # Example: curl -X POST -H 'Content-type: application/json' \
    #   --data '{"text":"🚨 CVE Alert: High/Critical vulnerabilities found in project"}' \
    #   YOUR_SLACK_WEBHOOK_URL
fi
EOF

    chmod +x "$SCRIPT_DIR/notify-cve.sh"
    echo -e "${GREEN}✅ Notification script created${NC}"
}

# Function to create dependency update script
create_dependency_script() {
    echo -e "${YELLOW}📦 Creating dependency update script...${NC}"
    
    cat > "$SCRIPT_DIR/update-dependencies.sh" << 'EOF'
#!/bin/bash

# Dependency Update Script
# This script updates dependencies for both Spring and .NET projects

set -e

PROJECT_ROOT="/Users/yshmulev/dev/spring-java-2"
SPRING_PROJECT="$PROJECT_ROOT"
DOTNET_PROJECT="$PROJECT_ROOT/dotnet-spring-equivalent"

echo "🔄 Updating dependencies..."

# Update Spring Boot dependencies
echo "Updating Spring Boot dependencies..."
cd "$SPRING_PROJECT"
mvn versions:use-latest-versions -DallowSnapshots=false

# Update .NET dependencies
echo "Updating .NET dependencies..."
cd "$DOTNET_PROJECT"
dotnet add package Microsoft.AspNetCore.OpenApi --version latest
dotnet add package Swashbuckle.AspNetCore --version latest
dotnet add package System.IdentityModel.Tokens.Jwt --version latest
dotnet add package Microsoft.IdentityModel.Tokens --version latest

echo "✅ Dependencies updated successfully!"
echo "⚠️  Please test your application after updating dependencies"
EOF

    chmod +x "$SCRIPT_DIR/update-dependencies.sh"
    echo -e "${GREEN}✅ Dependency update script created${NC}"
}

# Function to create security policy
create_security_policy() {
    echo -e "${YELLOW}📋 Creating security policy...${NC}"
    
    cat > "$PROJECT_ROOT/SECURITY.md" << 'EOF'
# Security Policy

## Supported Versions

| Version | Supported          |
| ------- | ------------------ |
| 0.2.x   | :white_check_mark: |

## Reporting a Vulnerability

If you discover a security vulnerability, please report it to:

- **Email**: security@yourcompany.com
- **GitHub Issues**: Create a private security advisory

## CVE Monitoring

This project includes automated CVE monitoring for:

- **Spring Boot**: Daily scans for known vulnerabilities
- **.NET**: Daily scans for known vulnerabilities
- **Docker Images**: Regular vulnerability assessments

## Security Measures

1. **Automated Scanning**: Daily CVE scans using Trivy and Docker Scout
2. **Dependency Updates**: Regular dependency updates and security patches
3. **Minimal Images**: Use of distroless and Alpine-based Docker images
4. **Non-root Users**: All containers run as non-root users
5. **Regular Updates**: Automated dependency and security updates

## Known Vulnerabilities

- **CVE-2023-45853**: Fixed by using Alpine-based images instead of Debian-based distroless
- **Spring CVEs**: Monitored and patched through regular updates
- **.NET CVEs**: Monitored and patched through regular updates

## Security Contacts

- **Primary**: security@yourcompany.com
- **Backup**: devops@yourcompany.com
EOF

    echo -e "${GREEN}✅ Security policy created${NC}"
}

# Function to run initial scan
run_initial_scan() {
    echo -e "${YELLOW}🔍 Running initial CVE scan...${NC}"
    
    if [ -f "$SCRIPT_DIR/cve-monitor.sh" ]; then
        "$SCRIPT_DIR/cve-monitor.sh"
        echo -e "${GREEN}✅ Initial CVE scan completed${NC}"
    else
        echo -e "${RED}❌ CVE monitor script not found${NC}"
    fi
}

# Main setup function
main() {
    check_dependencies
    setup_logging
    setup_cron_job
    create_notification_script
    create_dependency_script
    create_security_policy
    
    echo ""
    echo -e "${GREEN}🎉 CVE monitoring setup completed successfully!${NC}"
    echo ""
    echo -e "${BLUE}📋 What was set up:${NC}"
    echo "   ✅ Daily CVE monitoring (6 AM daily)"
    echo "   ✅ Logging and reporting directories"
    echo "   ✅ Notification script for alerts"
    echo "   ✅ Dependency update script"
    echo "   ✅ Security policy document"
    echo ""
    echo -e "${YELLOW}📁 Important directories:${NC}"
    echo "   📝 Logs: $PROJECT_ROOT/logs/"
    echo "   📊 Reports: $PROJECT_ROOT/security-reports/"
    echo "   🔧 Scripts: $PROJECT_ROOT/scripts/"
    echo ""
    echo -e "${BLUE}🚀 Next steps:${NC}"
    echo "   1. Run initial scan: $SCRIPT_DIR/cve-monitor.sh"
    echo "   2. Review security reports in $PROJECT_ROOT/security-reports/"
    echo "   3. Configure notifications in $SCRIPT_DIR/notify-cve.sh"
    echo "   4. Test dependency updates: $SCRIPT_DIR/update-dependencies.sh"
    echo ""
    echo -e "${GREEN}💡 Tip: Check logs daily for CVE updates${NC}"
}

# Run main function
main "$@"
