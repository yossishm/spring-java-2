# Multi-stage build with offline connectivity - no apk add required
# Based on alpine-distroless-specific but copying Java from builder stage

# Stage 1: Builder with full JDK and user creation
FROM eclipse-temurin:21.0.8_9-jdk-alpine-3.22 AS builder
WORKDIR /build
COPY target/gs-spring-boot-docker-0.2.0.jar /build/app.jar

# Create user in builder stage (has connectivity)
RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

# Stage 2: Minimal Alpine runtime (no connectivity needed)
FROM alpine:3.22.1 AS final

# Copy Java runtime from builder stage (no apk add required)
COPY --from=builder /opt/java/openjdk /opt/java/openjdk

# Copy user/group files from builder stage
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Create symlink for java command
RUN ln -sf /opt/java/openjdk/bin/java /usr/bin/java

# Set working directory
WORKDIR /app

# Copy the JAR from builder stage
COPY --from=builder /build/app.jar /app/app.jar

# Set ownership to non-root user
RUN chown -R nonroot:nonroot /app

# Switch to non-root user
USER nonroot:nonroot

# Expose port
EXPOSE 8080

# Run application
ENTRYPOINT ["java", "-jar", "/app/app.jar"]