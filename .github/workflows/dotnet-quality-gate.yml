name: .NET Quality Gate & Security Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dotnet-spring-equivalent/**'
      - '.github/workflows/dotnet-quality-gate.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'dotnet-spring-equivalent/**'
      - '.github/workflows/dotnet-quality-gate.yml'
  schedule:
    # Run security checks daily at 4 AM UTC
    - cron: '0 4 * * *'

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  quality-gate:
    name: .NET Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: false
    
    - name: Restore dependencies
      run: dotnet restore dotnet-spring-equivalent/SpringJavaEquivalent.csproj

    - name: Build project
      run: dotnet build dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
    
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./TestResults/**/coverage.cobertura.xml" -targetdir:"./TestResults/CoverageReport" -reporttypes:"Html;Cobertura"
    
    - name: Run security audit
      run: |
        echo "üîí Running .NET Security Audit..."
        dotnet list dotnet-spring-equivalent/SpringJavaEquivalent.csproj package --vulnerable --include-transitive || echo "‚ö†Ô∏è Security audit completed with findings"
        echo "‚úÖ Security audit completed"
      continue-on-error: true
    
    - name: Run code analysis
      run: |
        echo "üîç Running .NET Code Analysis..."
        dotnet build dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --verbosity normal /p:RunAnalyzersDuringBuild=true /p:EnableNETAnalyzers=true || echo "‚ö†Ô∏è Code analysis completed with findings"
        echo "‚úÖ Code analysis completed"
      continue-on-error: true
    
    - name: Check code style
      run: |
        echo "üé® Running .NET Code Style Check..."
        dotnet format dotnet-spring-equivalent/SpringJavaEquivalent.csproj --verify-no-changes --verbosity diagnostic || echo "‚ö†Ô∏è Code style check found issues"
        echo "‚úÖ Code style check completed"
      continue-on-error: true
    
    - name: Quality Gate Check
      run: |
        echo "üîç Running .NET Quality Gate Checks..."
        
        # Check if build succeeded
        if [ ! -d "dotnet-spring-equivalent/bin/Release" ]; then
          echo "‚ùå Build failed - no output directory found"
          exit 1
        fi
        
        # Check if tests ran (look for test results)
        if [ ! -d "./TestResults" ]; then
          echo "‚ùå No test results found"
          exit 1
        fi
        
        # Check coverage threshold (80%)
        if [ -f "./TestResults/CoverageReport/Cobertura.xml" ]; then
          COVERAGE=$(grep -o 'line-rate="[^"]*"' ./TestResults/CoverageReport/Cobertura.xml | head -1 | cut -d'"' -f2)
          if [ ! -z "$COVERAGE" ]; then
            COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d'.' -f1)
            echo "üìä Code Coverage: ${COVERAGE_PERCENT}%"
            
            if [ "$COVERAGE_PERCENT" -lt 80 ]; then
              echo "‚ùå Coverage below threshold: ${COVERAGE_PERCENT}% < 80%"
              exit 1
            else
              echo "‚úÖ Coverage meets threshold: ${COVERAGE_PERCENT}% >= 80%"
            fi
          else
            echo "‚ö†Ô∏è No coverage data found"
          fi
        else
          echo "‚ö†Ô∏è No coverage report found"
        fi
        
        echo "‚úÖ .NET Quality Gate passed!"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dotnet-test-results
        path: |
          ./TestResults/
          dotnet-spring-equivalent/bin/Release/
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./TestResults/CoverageReport/Cobertura.xml
        flags: dotnet
        name: codecov-dotnet
        fail_ci_if_error: false

  security-check:
    name: .NET Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: false
    
    - name: Restore dependencies
      run: dotnet restore dotnet-spring-equivalent/SpringJavaEquivalent.csproj
    
    - name: Security Scan with Trivy
      run: |
        echo "üîç Running Trivy Security Scan for .NET..."
        docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs --format table --severity HIGH,CRITICAL /workspace/dotnet-spring-equivalent
        docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs --format sarif --output /workspace/dotnet-trivy-results.sarif /workspace/dotnet-spring-equivalent
        echo "‚úÖ Trivy Security Scan completed"
    
    - name: Verify SARIF file
      run: |
        if [ -f "dotnet-trivy-results.sarif" ]; then
          echo "‚úÖ SARIF file exists"
          echo "File size: $(wc -c < dotnet-trivy-results.sarif) bytes"
          echo "First few lines:"
          head -5 dotnet-trivy-results.sarif
        else
          echo "‚ö†Ô∏è SARIF file not found, creating empty one"
          echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "Trivy", "version": "latest"}}, "results": []}]}' > dotnet-trivy-results.sarif
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('dotnet-trivy-results.sarif') != ''
      with:
        sarif_file: 'dotnet-trivy-results.sarif'
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dotnet-security-reports
        path: |
          dotnet-trivy-results.sarif

  sonarcloud-analysis:
    name: .NET SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: false

    - name: Restore dependencies
      run: dotnet restore dotnet-spring-equivalent/SpringJavaEquivalent.sln
      working-directory: .

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: SonarScanner Begin
      run: |
        dotnet sonarscanner begin \
          /k:"spring-java-2-dotnet" \
          /o:"yossishm" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.branch.name="main" \
          /d:sonar.cs.vstest.reportsPaths="TestResults/*.trx" \
          /d:sonar.cs.opencover.reportsPaths="TestResults/coverage-report/Cobertura.xml" \
          /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.g.cs" \
          /d:sonar.test.exclusions="**/bin/**,**/obj/**,**/TestResults/**"
      working-directory: dotnet-spring-equivalent

    - name: Build and test with coverage
      run: |
        echo "üî® Building solution..."
        dotnet build SpringJavaEquivalent.sln --configuration Release --no-restore

        echo "üß™ Running tests with coverage..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "üîç Checking if solution file exists:"
        ls -la SpringJavaEquivalent.sln || echo "Solution file not found"
        
        echo "üîç Checking if runsettings file exists:"
        ls -la ./coverlet.runsettings || echo "Runsettings file not found"
        
        echo "üß™ Running tests..."
        echo "üîç First, let's try to discover tests:"
        dotnet test SpringJavaEquivalent.sln --configuration Release --no-build --list-tests --verbosity diagnostic
        
        echo "üß™ Now running tests with coverage..."
        dotnet test SpringJavaEquivalent.sln --configuration Release --no-build --collect:"XPlat Code Coverage" --settings ./coverlet.runsettings --verbosity diagnostic --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults || echo "‚ö†Ô∏è Some tests failed, but continuing to collect coverage data"
        
        echo "üìä Test execution completed. Checking for results..."
        echo "TestResults directory contents:"
        ls -la ./TestResults/ || echo "TestResults directory not found"
        
        echo "üîç Looking for any test result files in the entire directory:"
        find . -name "*.trx" -o -name "coverage*" -o -name "TestResults" -type d

        echo "üìä Checking for test results in default location..."
        find . -name "*.trx" -o -name "coverage.cobertura.xml" | head -10 || echo "No test result files found"

        echo "üìÇ Creating TestResults directory and copying coverage files..."
        mkdir -p ./TestResults
        find . -name "coverage.cobertura.xml" -exec cp {} ./TestResults/ \; 2>/dev/null || echo "No coverage files found to copy"
        
        echo "üîç Looking for coverage files in TestResults subdirectories..."
        find ./TestResults -name "coverage.cobertura.xml" -exec cp {} ./TestResults/ \; 2>/dev/null || echo "No coverage files found in subdirectories"

        echo "üìä Checking test results..."
        ls -la ./TestResults/ || echo "‚ùå TestResults directory empty"
        
        echo "üîç Looking for coverage files in subdirectories..."
        find . -name "coverage.cobertura.xml" -type f || echo "No coverage files found anywhere"
      working-directory: dotnet-spring-equivalent


    - name: Verify coverage file
      run: |
        echo "üîç Checking for coverage files in TestResults directory..."
        ls -la ./TestResults/ || echo "TestResults directory not found"

        if [ -f "./TestResults/coverage.cobertura.xml" ]; then
          echo "‚úÖ Found coverage.cobertura.xml"
          echo "Coverage file size: $(wc -c < ./TestResults/coverage.cobertura.xml) bytes"
          echo "First few lines of coverage.cobertura.xml:"
          head -10 ./TestResults/coverage.cobertura.xml
          echo "‚úÖ Coverage file ready for SonarCloud analysis"
        else
          echo "‚ùå No coverage.cobertura.xml file found - failing workflow"
          ls -la ./TestResults/ || echo "TestResults directory not found"
          exit 1
        fi
      working-directory: dotnet-spring-equivalent

    - name: SonarScanner End
      run: |
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      working-directory: dotnet-spring-equivalent

