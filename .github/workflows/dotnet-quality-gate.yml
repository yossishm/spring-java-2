name: .NET Quality Gate & Security Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dotnet-spring-equivalent/**'
      - '.github/workflows/dotnet-quality-gate.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'dotnet-spring-equivalent/**'
      - '.github/workflows/dotnet-quality-gate.yml'
  schedule:
    # Run security checks daily at 4 AM UTC
    - cron: '0 4 * * *'

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  quality-gate:
    name: .NET Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
    
    - name: Restore dependencies
      run: dotnet restore dotnet-spring-equivalent/SpringJavaEquivalent.csproj --disable-lock-file-packages --disable-lock-file-packages

    - name: Build project
      run: dotnet build dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
    
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./TestResults/**/coverage.cobertura.xml" -targetdir:"./TestResults/CoverageReport" -reporttypes:"Html;Cobertura"
    
    - name: Run security audit
      run: |
        echo "üîí Running .NET Security Audit..."
        dotnet list dotnet-spring-equivalent/SpringJavaEquivalent.csproj package --vulnerable --include-transitive || echo "‚ö†Ô∏è Security audit completed with findings"
        echo "‚úÖ Security audit completed"
      continue-on-error: true
    
    - name: Run code analysis
      run: |
        echo "üîç Running .NET Code Analysis..."
        dotnet build dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --verbosity normal /p:RunAnalyzersDuringBuild=true /p:EnableNETAnalyzers=true || echo "‚ö†Ô∏è Code analysis completed with findings"
        echo "‚úÖ Code analysis completed"
      continue-on-error: true
    
    - name: Check code style
      run: |
        echo "üé® Running .NET Code Style Check..."
        dotnet format dotnet-spring-equivalent/SpringJavaEquivalent.csproj --verify-no-changes --verbosity diagnostic || echo "‚ö†Ô∏è Code style check found issues"
        echo "‚úÖ Code style check completed"
      continue-on-error: true
    
    - name: Quality Gate Check
      run: |
        echo "üîç Running .NET Quality Gate Checks..."
        
        # Check if build succeeded
        if [ ! -d "dotnet-spring-equivalent/bin/Release" ]; then
          echo "‚ùå Build failed - no output directory found"
          exit 1
        fi
        
        # Check if tests ran (look for test results)
        if [ ! -d "./TestResults" ]; then
          echo "‚ùå No test results found"
          exit 1
        fi
        
        # Check coverage threshold (80%)
        if [ -f "./TestResults/CoverageReport/Cobertura.xml" ]; then
          COVERAGE=$(grep -o 'line-rate="[^"]*"' ./TestResults/CoverageReport/Cobertura.xml | head -1 | cut -d'"' -f2)
          if [ ! -z "$COVERAGE" ]; then
            COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d'.' -f1)
            echo "üìä Code Coverage: ${COVERAGE_PERCENT}%"
            
            if [ "$COVERAGE_PERCENT" -lt 80 ]; then
              echo "‚ùå Coverage below threshold: ${COVERAGE_PERCENT}% < 80%"
              exit 1
            else
              echo "‚úÖ Coverage meets threshold: ${COVERAGE_PERCENT}% >= 80%"
            fi
          else
            echo "‚ö†Ô∏è No coverage data found"
          fi
        else
          echo "‚ö†Ô∏è No coverage report found"
        fi
        
        echo "‚úÖ .NET Quality Gate passed!"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dotnet-test-results
        path: |
          ./TestResults/
          dotnet-spring-equivalent/bin/Release/
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./TestResults/CoverageReport/Cobertura.xml
        flags: dotnet
        name: codecov-dotnet
        fail_ci_if_error: false

  security-check:
    name: .NET Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
    
    - name: Restore dependencies
      run: dotnet restore dotnet-spring-equivalent/SpringJavaEquivalent.csproj --disable-lock-file-packages
    
    - name: Security Scan with Trivy
      run: |
        echo "üîç Running Trivy Security Scan for .NET..."
        docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs --format table --severity HIGH,CRITICAL /workspace/dotnet-spring-equivalent
        docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs --format sarif --output /workspace/dotnet-trivy-results.sarif /workspace/dotnet-spring-equivalent
        echo "‚úÖ Trivy Security Scan completed"
    
    - name: Verify SARIF file
      run: |
        if [ -f "dotnet-trivy-results.sarif" ]; then
          echo "‚úÖ SARIF file exists"
          echo "File size: $(wc -c < dotnet-trivy-results.sarif) bytes"
          echo "First few lines:"
          head -5 dotnet-trivy-results.sarif
        else
          echo "‚ö†Ô∏è SARIF file not found, creating empty one"
          echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "Trivy", "version": "latest"}}, "results": []}]}' > dotnet-trivy-results.sarif
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('dotnet-trivy-results.sarif') != ''
      with:
        sarif_file: 'dotnet-trivy-results.sarif'
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dotnet-security-reports
        path: |
          dotnet-trivy-results.sarif

  sonarcloud-analysis:
    name: .NET SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true

    - name: Restore dependencies
      run: dotnet restore dotnet-spring-equivalent/SpringJavaEquivalent.csproj --disable-lock-file-packages

    - name: Build and test with coverage
      run: |
        dotnet build dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --no-restore
        dotnet test dotnet-spring-equivalent/SpringJavaEquivalent.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults

    - name: Generate SonarQube coverage report
      run: |
        # Find and copy coverage file
        find ./TestResults -name "coverage.cobertura.xml" -exec cp {} ./TestResults/coverage.xml \; 2>/dev/null || true

        # Generate SonarQube-compatible coverage format
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./TestResults/coverage.xml" -targetdir:"./TestResults" -reporttypes:"SonarQube" -sourcedirs:"dotnet-spring-equivalent"

    - name: SonarCloud Analysis
      uses: sonarsource/sonarcloud-github-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: dotnet-spring-equivalent
        args: >
          -Dsonar.projectKey=spring-java-2-dotnet-spring-equivalent
          -Dsonar.organization=yossishm
          -Dsonar.coverageReportPaths=./TestResults/SonarQube.xml
          -Dsonar.exclusions=**/bin/**,**/obj/**,**/TestResults/**,**/*.g.cs
          -Dsonar.test.exclusions=**/bin/**,**/obj/**

  notify-failure:
    name: Notify on .NET Failure
    runs-on: ubuntu-latest
    needs: [quality-gate, security-check]
    if: failure()
    
    steps:
    - name: Send Email Notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üö® .NET Quality Gate Failed - ${{ github.repository }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        html_body: |
          <h2>üö® .NET Quality Gate Failed</h2>
          
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          <p><strong>Author:</strong> ${{ github.actor }}</p>
          <p><strong>Workflow:</strong> ${{ github.workflow }}</p>
          <p><strong>Run ID:</strong> ${{ github.run_id }}</p>
          
          <h3>Failed Jobs:</h3>
          <ul>
            ${{ needs.quality-gate.result == 'failure' && '<li>‚ùå .NET Quality Gate</li>' || '' }}
            ${{ needs.security-check.result == 'failure' && '<li>‚ùå .NET Security Check</li>' || '' }}
          </ul>
          
          <h3>Links:</h3>
          <ul>
            <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></li>
            <li><a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}">View Commit</a></li>
          </ul>
          
          <p>Please check the workflow logs for detailed information about the failures.</p>
    
    - name: Create Issue on Failure
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® .NET Quality Gate Failed - ${context.ref.replace('refs/heads/', '')}`;
          const body = `
          ## .NET Quality Gate Failure
          
          **Repository:** ${context.repo.owner}/${context.repo.repo}
          **Branch:** ${context.ref.replace('refs/heads/', '')}
          **Commit:** ${context.sha}
          **Author:** ${context.actor}
          **Workflow:** ${context.workflow}
          **Run ID:** ${context.runId}
          
          ### Failed Jobs:
          ${context.payload.needs.quality-gate?.result === 'failure' ? '- ‚ùå .NET Quality Gate' : ''}
          ${context.payload.needs.security-check?.result === 'failure' ? '- ‚ùå .NET Security Check' : ''}
          
          ### Links:
          - [View Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - [View Commit](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})
          
          Please check the workflow logs for detailed information about the failures.
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'quality-gate', 'dotnet', 'ci/cd']
          });

  notify-success:
    name: Notify on .NET Success
    runs-on: ubuntu-latest
    needs: [quality-gate, security-check, sonarcloud-analysis]
    if: success() && github.event_name == 'push'
    
    steps:
    - name: Send Success Email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚úÖ .NET Quality Gate Passed - ${{ github.repository }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        html_body: |
          <h2>‚úÖ .NET Quality Gate Passed</h2>
          
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          <p><strong>Author:</strong> ${{ github.actor }}</p>
          
          <h3>Completed Jobs:</h3>
          <ul>
            <li>‚úÖ .NET Quality Gate</li>
            <li>‚úÖ .NET Security Check</li>
            <li>‚úÖ .NET SonarQube Analysis</li>
          </ul>
          
          <p>All .NET quality checks have passed successfully!</p>
