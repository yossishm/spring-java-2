name: CVE Security Monitoring

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'pom.xml'
      - 'dotnet-spring-equivalent/SpringJavaEquivalent.csproj'
      - 'Dockerfile*'

jobs:
  spring-cve-scan:
    name: Spring Boot CVE Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Spring Boot application
      run: |
        mvn clean package -DskipTests
        
    - name: Build Spring Boot Docker image
      run: |
        docker build -f Dockerfile.alpine-distroless-v2 -t spring-app:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'spring-app:latest'
        format: 'sarif'
        output: 'spring-trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'spring-trivy-results.sarif'
        
    - name: Run Docker Scout
      run: |
        docker scout quickview spring-app:latest || true
        
    - name: Check for specific Spring CVEs
      run: |
        echo "🔍 Checking for known Spring CVEs..."
        SPRING_CVES=("CVE-2025-22234" "CVE-2025-22232" "CVE-2025-22228" "CVE-2023-34040" "CVE-2024-38829")
        for cve in "${SPRING_CVES[@]}"; do
          if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format json spring-app:latest | grep -q "$cve"; then
            echo "⚠️ FOUND: $cve in Spring application"
            echo "CVE_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ Not found: $cve"
          fi
        done
        
    - name: Check for outdated Spring dependencies
      run: |
        mvn versions:display-dependency-updates || true
        
    - name: Create security report
      if: always()
      run: |
        echo "# Spring Boot Security Report - $(date)" > spring-security-report.md
        echo "## Scan Results" >> spring-security-report.md
        echo "- **Image**: spring-app:latest" >> spring-security-report.md
        echo "- **Base**: Alpine 3.22.1 with OpenJDK 21" >> spring-security-report.md
        echo "- **Scan Date**: $(date)" >> spring-security-report.md
        echo "- **Trivy Results**: spring-trivy-results.sarif" >> spring-security-report.md
        echo "" >> spring-security-report.md
        echo "## Recommendations" >> spring-security-report.md
        echo "1. Review all HIGH and CRITICAL vulnerabilities" >> spring-security-report.md
        echo "2. Update dependencies to latest secure versions" >> spring-security-report.md
        echo "3. Consider using Alpine-based images for better security" >> spring-security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: spring-security-report
        path: spring-security-report.md

  dotnet-cve-scan:
    name: .NET CVE Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Cache .NET dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/SpringJavaEquivalent.csproj') }}
        restore-keys: ${{ runner.os }}-nuget
        
    - name: Build .NET application
      run: |
        cd dotnet-spring-equivalent
        dotnet build
        
    - name: Build .NET Docker image
      run: |
        docker build -f dotnet-spring-equivalent/Dockerfile.distroless -t dotnet-app:latest dotnet-spring-equivalent/
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dotnet-app:latest'
        format: 'sarif'
        output: 'dotnet-trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'dotnet-trivy-results.sarif'
        
    - name: Run Docker Scout
      run: |
        docker scout quickview dotnet-app:latest || true
        
    - name: Check for specific .NET CVEs
      run: |
        echo "🔍 Checking for known .NET CVEs..."
        DOTNET_CVES=("CVE-2018-8540" "CVE-2023-29337" "CVE-2023-33128" "CVE-2023-33170")
        for cve in "${DOTNET_CVES[@]}"; do
          if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format json dotnet-app:latest | grep -q "$cve"; then
            echo "⚠️ FOUND: $cve in .NET application"
            echo "CVE_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ Not found: $cve"
          fi
        done
        
    - name: Check for outdated .NET dependencies
      run: |
        cd dotnet-spring-equivalent
        dotnet list package --outdated || true
        
    - name: Create security report
      if: always()
      run: |
        echo "# .NET Security Report - $(date)" > dotnet-security-report.md
        echo "## Scan Results" >> dotnet-security-report.md
        echo "- **Image**: dotnet-app:latest" >> dotnet-security-report.md
        echo "- **Base**: distroless/java21-debian12:nonroot" >> dotnet-security-report.md
        echo "- **Scan Date**: $(date)" >> dotnet-security-report.md
        echo "- **Trivy Results**: dotnet-trivy-results.sarif" >> dotnet-security-report.md
        echo "" >> dotnet-security-report.md
        echo "## Recommendations" >> dotnet-security-report.md
        echo "1. Review all HIGH and CRITICAL vulnerabilities" >> dotnet-security-report.md
        echo "2. Update dependencies to latest secure versions" >> dotnet-security-report.md
        echo "3. Consider using Alpine-based images for better security" >> dotnet-security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-security-report
        path: dotnet-security-report.md

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [spring-cve-scan, dotnet-cve-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        path: security-reports
        
    - name: Create combined security report
      run: |
        echo "# Combined Security Report - $(date)" > combined-security-report.md
        echo "" >> combined-security-report.md
        echo "## Spring Boot Application" >> combined-security-report.md
        if [ -f "security-reports/spring-security-report/spring-security-report.md" ]; then
          cat security-reports/spring-security-report/spring-security-report.md >> combined-security-report.md
        fi
        echo "" >> combined-security-report.md
        echo "## .NET Application" >> combined-security-report.md
        if [ -f "security-reports/dotnet-security-report/dotnet-security-report.md" ]; then
          cat security-reports/dotnet-security-report/dotnet-security-report.md >> combined-security-report.md
        fi
        echo "" >> combined-security-report.md
        echo "## Next Steps" >> combined-security-report.md
        echo "1. Review all security reports" >> combined-security-report.md
        echo "2. Address any HIGH or CRITICAL vulnerabilities" >> combined-security-report.md
        echo "3. Update dependencies as needed" >> combined-security-report.md
        echo "4. Consider implementing additional security measures" >> combined-security-report.md
        
    - name: Upload combined security report
      uses: actions/upload-artifact@v4
      with:
        name: combined-security-report
        path: combined-security-report.md
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('combined-security-report.md')) {
            const report = fs.readFileSync('combined-security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });
          }
