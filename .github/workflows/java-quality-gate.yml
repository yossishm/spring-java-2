name: Java Quality Gate & Security Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/java-quality-gate.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/java-quality-gate.yml'
  schedule:
    # Run security checks daily at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  MAVEN_OPTS: "-Xmx1024m -XX:+UseG1GC"
  JAVA_VERSION: '21'

jobs:
  quality-gate:
    name: Java Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Restore dependencies
      run: mvn dependency:resolve

    - name: Build project
      run: mvn clean compile -DskipTests
    
    - name: Run tests
      run: mvn test jacoco:report
    
    - name: Generate coverage report
      run: |
        echo "üìä Coverage report generated at target/site/jacoco/jacoco.xml"
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "‚úÖ Coverage report exists"
          echo "Coverage file size: $(wc -c < target/site/jacoco/jacoco.xml) bytes"
        else
          echo "‚ùå Coverage report not found"
        fi
    
    - name: Run security audit
      run: |
        echo "üîí Running Java Security Audit..."
        mvn org.owasp:dependency-check-maven:check || echo "‚ö†Ô∏è Security audit completed with findings"
        echo "‚úÖ Security audit completed"
      continue-on-error: true
    
    - name: Run code analysis
      run: |
        echo "üîç Running Java Code Analysis..."
        mvn spotbugs:check || echo "‚ö†Ô∏è SpotBugs analysis completed with findings"
        mvn checkstyle:check || echo "‚ö†Ô∏è Checkstyle analysis completed with findings"
        mvn pmd:check || echo "‚ö†Ô∏è PMD analysis completed with findings"
        echo "‚úÖ Code analysis completed"
      continue-on-error: true
    
    - name: Quality Gate Check
      run: |
        echo "üîç Running Java Quality Gate Checks..."
        
        # Check if build succeeded
        if [ ! -d "target/classes" ]; then
          echo "‚ùå Build failed - no classes directory found"
          exit 1
        fi
        
        # Check if tests ran (look for test results)
        if [ ! -d "target/surefire-reports" ]; then
          echo "‚ùå No test results found"
          exit 1
        fi
        
        # Check coverage threshold (80%)
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          COVERAGE=$(grep -o 'line-rate="[^"]*"' target/site/jacoco/jacoco.xml | head -1 | cut -d'"' -f2)
          if [ ! -z "$COVERAGE" ]; then
            COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d'.' -f1)
            echo "üìä Code Coverage: ${COVERAGE_PERCENT}%"
            
            if [ "$COVERAGE_PERCENT" -lt 80 ]; then
              echo "‚ùå Coverage below threshold: ${COVERAGE_PERCENT}% < 80%"
              exit 1
            else
              echo "‚úÖ Coverage meets threshold: ${COVERAGE_PERCENT}% >= 80%"
            fi
          else
            echo "‚ö†Ô∏è No coverage data found"
          fi
        else
          echo "‚ö†Ô∏è No coverage report found"
        fi
        
        echo "‚úÖ Java Quality Gate passed!"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: java-test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
          target/spotbugs/
          target/site/checkstyle/
          target/pmd.xml
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: target/site/jacoco/jacoco.xml
        flags: java
        name: codecov-java
        fail_ci_if_error: false

  security-check:
    name: Java Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Security Scan with Trivy
      run: |
        echo "üîç Running Trivy Security Scan for Java..."
        docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs --format table --severity HIGH,CRITICAL /workspace/src
        docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs --format sarif --output /workspace/java-trivy-results.sarif /workspace/src
        echo "‚úÖ Trivy Security Scan completed"
    
    - name: Verify SARIF file
      run: |
        if [ -f "java-trivy-results.sarif" ]; then
          echo "‚úÖ SARIF file exists"
          echo "File size: $(wc -c < java-trivy-results.sarif) bytes"
          echo "First few lines:"
          head -5 java-trivy-results.sarif
        else
          echo "‚ö†Ô∏è SARIF file not found, creating empty one"
          echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "Trivy", "version": "latest"}}, "results": []}]}' > java-trivy-results.sarif
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('java-trivy-results.sarif') != ''
      with:
        sarif_file: 'java-trivy-results.sarif'
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: java-security-reports
        path: |
          java-trivy-results.sarif

  sonarcloud-analysis:
    name: Java SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Restore dependencies
      run: mvn dependency:resolve

    - name: Build and test with coverage
      run: |
        echo "üî® Building project..."
        mvn clean compile -DskipTests

        echo "üß™ Running tests with coverage..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "üîç Checking if pom.xml exists:"
        ls -la pom.xml || echo "pom.xml not found"
        
        echo "üß™ Running tests with coverage..."
        mvn test jacoco:report || echo "‚ö†Ô∏è Some tests failed, but continuing to collect coverage data"
        
        echo "üìä Test execution completed. Checking for results..."
        echo "Target directory contents:"
        ls -la target/ || echo "Target directory not found"
        
        echo "üîç Looking for coverage files..."
        find target/ -name "jacoco.xml" -o -name "*.xml" | head -10 || echo "No coverage files found"

        echo "üìä Checking coverage report..."
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "‚úÖ Coverage report found"
          echo "Coverage file size: $(wc -c < target/site/jacoco/jacoco.xml) bytes"
          echo "First few lines of coverage report:"
          head -10 target/site/jacoco/jacoco.xml
        else
          echo "‚ùå No coverage report found"
          exit 1
        fi

    - name: Verify coverage file
      run: |
        echo "üîç Checking for coverage files in target directory..."
        ls -la target/ || echo "Target directory not found"

        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "‚úÖ Found jacoco.xml"
          echo "Coverage file size: $(wc -c < target/site/jacoco/jacoco.xml) bytes"
          echo "First few lines of jacoco.xml:"
          head -10 target/site/jacoco/jacoco.xml
          echo "‚úÖ Coverage file ready for SonarCloud analysis"
        else
          echo "‚ùå No jacoco.xml file found - failing workflow"
          ls -la target/ || echo "Target directory not found"
          exit 1
        fi

    - name: SonarCloud Analysis
      run: |
        echo "üîç Starting SonarCloud analysis for Java project..."
        echo "üîç Current working directory:"
        pwd
        echo "üîç Directory structure:"
        ls -la
        echo "üîç Checking coverage file:"
        ls -la target/site/jacoco/jacoco.xml || echo "Coverage file not found"
        
        mvn sonar:sonar \
          -Dsonar.projectKey=yossishm_spring-java-2 \
          -Dsonar.organization=yossishm \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login="${{ secrets.SONAR_TOKEN }}" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.junit.reportPaths=target/surefire-reports \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.source=21 \
          -Dsonar.java.target=21 \
          -Dsonar.exclusions="**/target/**,**/build/**,**/*.class,**/node_modules/**,**/logs/**,**/bin/**,**/obj/**,**/TestResults/**" \
          -Dsonar.test.exclusions="**/target/**,**/build/**,**/bin/**,**/obj/**,**/TestResults/**" \
          -Dsonar.qualitygate.wait=false \
          -Dsonar.verbose=true
        
        echo "‚úÖ SonarCloud analysis completed for Java project"
